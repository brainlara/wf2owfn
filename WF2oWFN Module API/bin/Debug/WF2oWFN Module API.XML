<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WF2oWFN Module API</name>
    </assembly>
    <members>
        <member name="T:WF2oWFN.API.Petri.Arc">
            <summary>
            Petri Net Arc
            </summary>
        </member>
        <member name="M:WF2oWFN.API.Petri.Arc.#ctor(WF2oWFN.API.Petri.Node,WF2oWFN.API.Petri.Node)">
            <summary>
            Constructor
            </summary>
            <param name="source">The source node of the arc</param>
            <param name="target">The target node of the arc</param>
        </member>
        <member name="P:WF2oWFN.API.Petri.Arc.Source">
            <summary>
            The source node of the arc
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Arc.Target">
            <summary>
            The target node of the arc
            </summary>
        </member>
        <member name="T:WF2oWFN.API.ParseException">
            <summary>
            Custom exception for handling parse exceptions in <c>IActivity</c> modules
            </summary>
        </member>
        <member name="M:WF2oWFN.API.ParseException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WF2oWFN.API.ParseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:WF2oWFN.API.ParseException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="elementNumber">Element number in the <c>IXamlElement</c> queue where the exception happened</param>
            <param name="activity"><c>IActivity</c> name which caused the exception</param>
        </member>
        <member name="P:WF2oWFN.API.ParseException.ElementNumber">
            <summary>
            Property for the element number in the <c>IXamlElement</c> queue where the exception happened 
            </summary>
        </member>
        <member name="P:WF2oWFN.API.ParseException.Activity">
            <summary>
            Property for the <c>IActivity</c> name which caused the exception
            </summary>
        </member>
        <member name="P:WF2oWFN.API.ParseException.Message">
            <summary>
            Property for the exception message
            </summary>
        </member>
        <member name="T:WF2oWFN.API.IXamlElement">
            <summary>
            Represents a Xaml(x)-tag representation for parsing an <c>IActivity</c> AST
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IXamlElement.QName">
            <summary>
            Qualified name of the element (e.g. {http://tempuri.org}Name)
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IXamlElement.LocalName">
            <summary>
            Local Name of the element (e.g. Name)
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IXamlElement.Namespace">
            <summary>
            Namespace of the element (e.g. http://tempuri.org)
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IXamlElement.Attributes">
            <summary>
            Attributes of the element (e.g. {"DisplayName" "Pick"})
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IXamlElement.IsClosingElement">
            <summary>
            Indicates whether the element is a closing tag
            </summary>
        </member>
        <member name="T:WF2oWFN.API.IActivity">
            <summary>
            Represents all possible Xaml(x)-Activities.
            </summary>
        </member>
        <member name="M:WF2oWFN.API.IActivity.Parse(System.Collections.Generic.Queue{WF2oWFN.API.IXamlElement})">
            <summary>
            Parse the Xaml(x)-Activity into an AST
            </summary>
            <param name="token">A Queue containing all IXamlElements which shall be parsed</param>
            <returns>An <c>IActivity</c> AST representation </returns>
        </member>
        <member name="M:WF2oWFN.API.IActivity.Compile(WF2oWFN.API.Petri.PetriNet)">
            <summary>
            Compile the <c>IActivity</c> into a Petri Net
            </summary>
            <param name="phylum">The phylum net that may already contain structures</param>
            <returns>A petri net representation of the <c>IActivity</c> added to the <c>phylum</c> net</returns>
        </member>
        <member name="P:WF2oWFN.API.IActivity.QName">
            <summary>
            Getter for the Activitiy's QualifiedName.
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IActivity.LocalName">
            <summary>
            Getter for the  Activitiy's LocalName.
            </summary>
        </member>
        <member name="T:WF2oWFN.API.Petri.Node">
            <summary>
            Petri Net Node
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.Node.name">
            <summary>
            The name of the node
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.Node.preSet">
            <summary>
            The preset of the node
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.Node.postSet">
            <summary>
            The postset of the node
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.Node.type">
            <summary>
            The communication type of the node (e.g. input)
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.Node.history">
            <summary>
            The history of the node (e.g. former names after merging nodes)
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Node.Name">
            <summary>
            The name of the Node
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Node.PreSet">
            <summary>
            The preset of the Node
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Node.PostSet">
            <summary>
            The postset of the Node
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Node.Type">
            <summary>
            The communication type of the node (e.g. input)
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Node.History">
            <summary>
            The history of the node (e.g. former names after merging nodes)
            </summary>
        </member>
        <member name="T:WF2oWFN.API.Petri.Transition">
            <summary>
            Petri Net Transition
            </summary>
        </member>
        <member name="M:WF2oWFN.API.Petri.Transition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:WF2oWFN.API.IComposite">
            <summary>
            Represents structured Xaml(x)-Activities that may have inner activities.
            </summary>
        </member>
        <member name="P:WF2oWFN.API.IComposite.ModuleFactory">
            <summary>
            Sets the IModuleFactory for handling inner activities.
            </summary>
        </member>
        <member name="T:WF2oWFN.API.IModuleFactory">
            <summary>
            Loads plugin modules and creates <c>IActivity</c> instances for parsing and compiling Xaml(x) elements
            </summary>
        </member>
        <member name="M:WF2oWFN.API.IModuleFactory.CreateActivity(System.String)">
            <summary>
            Tries to create an instance of a module for the specified activity
            </summary>
            <param name="qname">The qualified name of the activity</param>
            <returns>An instance of an <c>IActivity</c> module for the given activity or <c>null</c> if no module was found</returns>
        </member>
        <member name="T:WF2oWFN.API.Petri.PetriNet">
            <summary>
            Petri Net Outputs
            </summary>
            <summary>
            A class representing a Petri Net
            </summary>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.OutputOwfn(System.String)">
            <summary>
            Outputs the net in oWFN-format.
            Compliant to EBNF: Petri Net API 4.02, 28. July 2010, doc p.10
            </summary>
            <param name="filename">Path to output file</param>
            <exception cref="T:System.NullReferenceException">Thrown when <code>filename</code> is empty.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an error occurs during writing to the output file</exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.outputDot(System.String)">
            <summary>
            Outputs the net in DOT-format.
            Currently uses PNAPI native runtime (4.02 July 2010).
            </summary>
            <param name="filename">Path to output file</param>
            <exception cref="T:System.NullReferenceException">Thrown when <code>filename</code> is empty.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an error occurs during writing to the temporary oWFN file</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the user has no rights to access temporary path</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an error occurs calling PNAPI</exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.outputPng(System.String)">
            <summary>
            Outputs the net in PNG-Format, if Graphviz was found in the Environment variables
            </summary>
            <param name="filename">Path to output file</param>
            <exception cref="T:System.NullReferenceException">Thrown when <code>filename</code> is empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when an error occurs calling Graphviz DOT</exception>
            <exception cref="T:System.IO.IOException">Thrown when an error occurs during writing to the temporary oWFN file</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the user has no rights to access temporary path</exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewPlace(System.String)">
            <summary>
            Adds a new internal place to the petri net
            </summary>
            <param name="id">Unique identifier for the place (used in history)</param>
            <exception cref="T:System.ArgumentException">If the place with the given <c>id</c> already exists</exception>
            <returns>The place</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewPlace(System.String,WF2oWFN.API.Petri.PetriNet.CommunicationType)">
            <summary>
            Adds a new place to the petri net
            </summary>
            <param name="id">Unique identifier for the place (used in history)</param>
            <param name="type">The communication type of the place (e.g. input)</param>
            <exception cref="T:System.ArgumentException">If the place with the given <c>id</c> already exists or is empty</exception>
            <returns>The place</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewTransition(System.String)">
            <summary>
            Adds a new transition to the petri net
            </summary>
            <param name="id">Unique identifier for the transition</param>
            <exception cref="T:System.ArgumentException">If the transition with the given <c>id</c> already exists or is empty</exception>
            <returns>The transition</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewArc(WF2oWFN.API.Petri.Node,WF2oWFN.API.Petri.Node)">
            <summary>
            Adds a new arc to the petri net
            </summary>
            <param name="source">The source node of the arc</param>
            <param name="target">The target node of the arc</param>
            <exception cref="T:System.ArgumentException">If the source-target nodes are not place-transition or transition-place combinations</exception>
            <exception cref="T:System.NullReferenceException">If the <c>source</c> or <c>target</c> node are <c>null</c></exception>
            <returns>The arc</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewArc(WF2oWFN.API.Petri.Node,System.String)">
            <summary>
            Adds a new arc to the petri net
            </summary>
            <param name="source">The source node of the arc</param>
            <param name="id2">Unique identifier for the target</param>
            <exception cref="T:System.ArgumentException">If the source-target nodes are not place-transition or transition-place combinations</exception>
            <exception cref="T:System.NullReferenceException">If the <c>source</c> or <c>target</c> node are <c>null</c></exception>
            <returns>The arc</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.NewArc(System.String,WF2oWFN.API.Petri.Node)">
            <summary>
            Adds a new arc to the petri net
            </summary>
            <param name="id1">Unique identifier for the source</param>
            <param name="target">The target node of the arc</param>
            <exception cref="T:System.ArgumentException">If the source-target nodes are not place-transition or transition-place combinations</exception>
            <exception cref="T:System.NullReferenceException">If the <c>source</c> or <c>target</c> node are <c>null</c></exception>
            <returns>The arc</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Merge(WF2oWFN.API.Petri.Place,WF2oWFN.API.Petri.Place)">
            <summary>
            Merges two places in the petri net
            </summary>
            <param name="p1">Place to merge</param>
            <param name="p2">Place to merge</param>
            <remarks>Currently the new place uses the name of <c>p1</c>, both names are kept in history tho</remarks>
            <exception cref="T:System.NullReferenceException">If any of the places is <c>null</c></exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Merge(WF2oWFN.API.Petri.Place,System.String)">
            <summary>
            Merges two places in the petri net
            </summary>
            <param name="p1">Place to merge</param>
            <param name="id2">Unique identifier of the place to merge</param>
            <remarks>Currently the new place uses the name of <c>p1</c>, both names are kept in history tho</remarks>
            <exception cref="T:System.NullReferenceException">If any of the places is <c>null</c></exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Merge(System.String,WF2oWFN.API.Petri.Place)">
            <summary>
            Merges two places in the petri net
            </summary>
            <param name="id1">Unique identifier of the place to merge</param>
            <param name="p2">Place to merge</param>
            <remarks>Currently the new place uses the name of <c>p1</c>, both names are kept in history tho</remarks>
            <exception cref="T:System.NullReferenceException">If any of the places is <c>null</c></exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Merge(System.String,System.String)">
            <summary>
            Merges two places in the petri net
            </summary>
            <param name="id1">Unique identifier of the place to merge</param>
            <param name="id2">Unique identifier of the place to merge</param>
            <remarks>Currently the new place uses the name of <c>p1</c>, both names are kept in history tho</remarks>
            <exception cref="T:System.NullReferenceException">If any of the places is <c>null</c></exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Remove(WF2oWFN.API.Petri.Place)">
            <summary>
            Removes a place from the petri net
            </summary>
            <param name="place">The place to remove</param>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.Find(System.String)">
            <summary>
            Finds a place in the petri net
            </summary>
            <param name="id">Unique identifier of the place to find</param>
            <returns>The place or <c>null</c> if no place was found</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.AddFinalSet(System.Collections.Generic.HashSet{WF2oWFN.API.Petri.Place})">
            <summary>
            Adds a new final set to the final set list
            </summary>
            <param name="finalSet"></param>
            <exception cref="T:System.NullReferenceException">If the <c>finalSet</c> is <c>null</c></exception>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.GetStatistics">
            <summary>
            Aggregates statistical data about the petri net.
            </summary>
            <returns>A statistical summary of the petri net</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.newPlace(WF2oWFN.API.Petri.Place)">
            <summary>
            Adds a new internal place to the petri net
            </summary>
            <param name="place">The place to add</param>
            <exception cref="T:System.ArgumentException">If the given <c>place</c> already exists</exception>
            <returns>The place</returns>
        </member>
        <member name="M:WF2oWFN.API.Petri.PetriNet.GetArcWeight(WF2oWFN.API.Petri.Node,WF2oWFN.API.Petri.Node)">
            <summary>
            Returns the weight of the arc between the <c>source</c> and <c>target</c> node
            <remarks>Currently fixed to a cardinality of one and only used by petri het output</remarks>
            </summary>
            <param name="source">The source node</param>
            <param name="target">The target node</param>
            <returns>The weight of the node or null if no arc exists between the nodes</returns>
        </member>
        <member name="P:WF2oWFN.API.Petri.PetriNet.ActivityCount">
            <summary>
            Property for the activity scope identifier
            </summary>
        </member>
        <member name="T:WF2oWFN.API.Petri.PetriNet.CommunicationType">
            <summary>
            Enumeration for the communication types of nodes
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.PetriNet.CommunicationType.Internal">
            <summary>
            Internal nodes
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.PetriNet.CommunicationType.Input">
            <summary>
            Input nodes
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.PetriNet.CommunicationType.Output">
            <summary>
            Output nodes
            </summary>
        </member>
        <member name="F:WF2oWFN.API.Petri.PetriNet.CommunicationType.InOut">
            <summary>
            In- and Output nodes
            </summary>
        </member>
        <member name="T:WF2oWFN.API.IPrimitive">
            <summary>
            Represents primitive Xaml(x)-Activities that may not inherit any other activities.
            </summary>
        </member>
        <member name="T:WF2oWFN.API.Petri.Place">
            <summary>
            Petri Net Place
            </summary>
        </member>
        <member name="M:WF2oWFN.API.Petri.Place.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Place.isFinal">
            <summary>
            Property for defining final places 
            </summary>
        </member>
        <member name="P:WF2oWFN.API.Petri.Place.Tokens">
            <summary>
            Property for the token count
            </summary>
        </member>
    </members>
</doc>
